class DescentEnemy : Actor
{
	double friction;
	double aggressiveness;
	vector3 toAngles;
	vector3 targetLastPos;
	vector3 curTrackingPos;
	vector3 angleImpulse; // Used to shake the actor around.
	
	double curChaseAngle;
	double turnSpeed;
	double dodgeChance, dodgeWait, dodgeTimer;
	int score;
	bool trackLastPos;
	Quat curRotation;
	
	Property TurnSpeed : turnSpeed;
	Property MoveFriction : friction;
	Property Aggression : aggressiveness;
	Property ScorePoints : score;
	Property DodgeChance : dodgeChance;
	Property DodgeCooldown : dodgeWait;

	Default
	{
		+INTERPOLATEANGLES;
		+SLIDESONWALLS;
		
		DescentEnemy.TurnSpeed 4;
		DescentEnemy.MoveFriction 0.03;
		DescentEnemy.Aggression 0.5;
		DescentEnemy.ScorePoints 100;
		DescentEnemy.DodgeChance 50;
		DescentEnemy.DodgeCooldown 15;
	}
	
	override void PostBeginPlay()
	{
		curRotation = Quat.FromAngles(angle, pitch, roll);
		toAngles = (0, 0, 0);
		curChaseAngle = angle;
		super.PostBeginPlay();
	}
	
	void Accelerate(double spd)
	{
		Quat dir = Quat.FromAngles(angle, pitch, roll);
		vel += dir * (spd, 0,0);
	}
	
	void DodgeRandom(double spd)
	{
		Quat dir = Quat.FromAngles(angle, pitch, roll);
		vector3 dodgeDir = (
			randompick[DSCDroneDodge](-1,1), 
			randompick[DSCDroneDodge](-1,1), 
			randompick[DSCDroneDodge](-1,1)
		);
		
		vel += dir * (dodgeDir * spd);
	}
	
	void DodgeDirection(double spd, double fw, double lr, double ud)
	{
		Quat dir = Quat.FromAngles(angle, pitch, roll);
		vector3 dodgeDir = (fw, lr, ud);
		
		vel += dir * (dodgeDir * spd);
	}	
	
	Actor A_ShootProjectile(class<Actor> proj, double angleOffs = 0, double pitchOffs = 0, double rollOffs = 0, double fw = 0, double lr = 0, double ud = 0, double speed = 0)
	{
		vector3 views = (angle+angleOffs, pitch+pitchOffs, roll+rollOffs);
		vector3 worldOffs = DSCMath.V3Offset(views.x,views.y,views.z, fw,lr,ud, 1.0);
		vector3 spawnPos = level.vec3offset(pos, worldOffs);
		
		let proj = DSCProjectile(Actor.Spawn(proj, spawnPos));
		if(proj)
		{
			proj.angle = views.x;
			proj.pitch = views.y;
			proj.roll  = views.z;
			proj.target = self;
			
			double move = speed ? speed : proj.default.Speed;
            proj.vel = DSCMath.V3Offset(views.x,views.y,views.z, 1,0,0, move);
		}
		
		return proj;
	}
	
	override int DamageMobJ(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle)
	{
		if(mod == 'DescentMissileExplosion')
			damage = floor(damage / 10.);
	
		if(!inflictor) 
			return super.DamageMobJ(inflictor, source, damage, mod, flags, angle);
		
		Actor shooter = inflictor.bSHOOTABLE ? inflictor : source;
		if(shooter && shooter.bSHOOTABLE && target && target != shooter) 
		{
			double shooterDist = Distance3DSquared(shooter);
			double curDist = Distance3DSquared(target);
			double distMod = clamp(shooterDist / curDist, 0, 2.0);
			double threatLevel = 50 * distMod;
			if(random[EngageThreat](0,100) >= (100-threatLevel))
				target = shooter;	
		}
		
		double scaledDamage = double(damage) / DSCDMG;
		damage = max(1, floor(scaledDamage));
		
		return super.DamageMobJ(inflictor, source, damage, mod, flags, angle);
	}
	
	void A_ViewRecoil(double yaw, double pitch, double roll)
	{
		angleImpulse.x += yaw;
		angleImpulse.y += pitch;
		angleImpulse.z += roll;
	}
	
	override void Tick()
	{
		if(!level.isFrozen())
		{
			A_TurnToTarget();
		
			let input = Quat.FromAngles(
				toAngles.x + angleImpulse.x, 
				toAngles.y + angleImpulse.y, 
				toAngles.z + angleImpulse.z
			);
			
			curRotation *= input;
		
			// Interpolate to it
			let r = Quat.FromAngles(angle, pitch, roll);
			r = Quat.Slerp(r, curRotation, 0.2);

			let eulerAngles = DSCMath.getQuatAngles(r);
			A_SetAngle(eulerAngles.x, SPF_Interpolate);
			A_SetPitch(eulerAngles.y, SPF_Interpolate);		
			A_SetRoll(eulerAngles.z, SPF_Interpolate);
			
			toAngles *= 0;
			
			vel *= (1.0-friction); // Friction;
			angleImpulse *= 0.97;
		}
		
		
		if(dodgeTimer > 0) dodgeTimer--;
		super.Tick();		
	}
	
	void A_DescentLook(StateLabel seeState = "See", double lookFOV = 90)
	{
		LookExParams look;
		look.FOV = 90;
		int close = int.max;
		target = null;
		
		// Process hearing
		Actor noisyActor = CurSector.SoundTarget;
		if(!noisyActor) noisyActor = LastHeard;
		
		let it = ThinkerIterator.Create();
		Actor act;
		while(act = Actor(it.Next()))
		{
			if(!act.bSHOOTABLE) continue;
			if(!IsHostile(act)) continue;
			if(!IsVisible(act, false, look) && act != noisyActor) continue;
			
			double dist = Distance3DSquared(act);
			if(close > dist) 
			{
				target = act;
				close = dist;
			}
		}
		
		if(target && seeState)
		{
			curTrackingPos = target.pos;
			SetStateLabel(seeState); 
		}
	}
	
	void A_DescentChase(double missileChance = 50, double minMissileDist = 512, double minEngageDist = 64, double viewSens = 10)
	{
		if(!target || target.health <= 0) 
		{
			if(bFRIENDLY) 
			{
				A_DescentLook(null);
				A_DescentWander();
			}
			else
			{
				SetStateLabel("Spawn");
			}
			return;
		}
		
		if(bFRIENDLY)
		{
			PlayerInfo fPlayer = players[FriendPlayer];
			if(fPlayer && fPlayer.attacker && !fPlayer.attacker.bFRIENDLY)
				target = fPLayer.attacker;
		}
		
		LookExParams look;
		look.FOV = 360;
		bool canSee = IsVisible(target, true, look);
		
		look.FOV = 90;
		bool inView = IsVisible(target, false, look);
		
		if(canSee) curTrackingPos = target.pos;
		
		// Take direct route.
		vector3 aimToPos = (curTrackingPos.xy, curTrackingPos.z + (target.height*0.5));
		vector3 toOther = level.sphericalCoords(pos, aimToPos, (angle,pitch));
		bool facingTarget = ((abs(toOther.x) + abs(toOther.y)) <= viewSens) || (random[DescentAIAggression](0,100) <= (aggressiveness*100));
		
		if(facingTarget)
		{
			let plrtarget = PlayerPawn(target);
			if(plrtarget)
			{
				let cmd = plrtarget.player.cmd;
				bool plrFiring = plrtarget.InStateSequence(plrtarget.CurState, plrtarget.MissileState);
				
				FLineTraceData hitpos;
				plrtarget.LineTrace(plrtarget.angle, 8192, plrtarget.pitch, data:hitPos);
				
				bool willHit = (hitpos.HitType == TRACE_HitActor) && hitpos.HitActor == self;

				if( willHit && dodgeTimer <= 0 && plrFiring && random[DroneDodgeRNG](0,100) >= (100-dodgeChance) )
				{
					DodgeRandom(default.Speed * frandom[DroneDodgeRNG](3.0,6.0));
					dodgeTimer = dodgeWait;
				}
			}
		}
		
		if( facingTarget && canSee && (toOther.z <= minMissileDist || random[MissileRandom](0,100) >= (100-missileChance)) ) 
		{
			SetStateLabel("Missile");
			
			if(toOther.z <= minEngageDist) return;
			
			double hperc = health / SpawnHealth();
			hperc += aggressiveness;
			hperc = clamp(hperc, 0, 1.0);
			double midEngageDist = minEngageDist * (1.0 - hperc);
			if(toOther.z < midEngageDist) return;
		}

		if(canSee)
		{
			Accelerate( default.Speed * (inView ? 1.0 : 0.3) );
			
			targetLastPos = target.pos;
			trackLastPos = true;
		}
		else 
		{
			FLineTraceData lt;
			LineTrace(angle, 64, pitch, data:lt);
			bool canMoveTo = lt.HitType == TRACE_HitNone;
			
			if(trackLastPos && canMoveTo)
			{
				curTrackingPos = targetLastPos;
				Accelerate(default.Speed);
				
				vector3 posDiff = level.Vec3Diff(pos, aimToPos);
				if( posDiff.Length() <= radius*2.0 ) 
				{
					// If we're still looking at this point, we've got no idea where 
					// they went.
					trackLastPos = false;
				}
			}
			else
			{
				NewChaseDir();
				curChaseAngle = DSCMath.LerpDegrees(curChaseAngle, movedir*45, 0.25);
				
				vector3 chaseDiff = level.vec3diff(pos, target.pos);
				double chasePitch = -asin(chaseDiff.z);
				
				vel = (
					cos(curChaseAngle) * cos(chasePitch),
					sin(curChaseAngle) * cos(chasePitch),
					-sin(chasePitch)
				) * default.Speed;
			}
		}
	}
	
	void A_DescentWander()
	{
		RandomChaseDir();
		curChaseAngle = DSCMath.LerpDegrees(curChaseAngle, movedir*45, 0.25);
		
		vel = (
			cos(curChaseAngle) * cos(pitch),
			sin(curChaseAngle) * cos(pitch),
			-sin(pitch)
		) * default.Speed;
	}

	
	void A_TurnToTarget()
	{
		if(!target) return;
		
		vector3 aimToPos = (curTrackingPos.xy, curTrackingPos.z + (target.height*0.5));
		vector3 forwardPos = DSCMath.V3Offset(angle, pitch, roll, radius, 0, 0, 1.);
		forwardPos = level.vec3offset(pos, forwardPos);

		vector3 toOther = level.sphericalCoords(forwardPos, aimToPos, (angle, pitch));
		double angleTo = -toOther.x;
		double pitchTo = -toOther.y;
		
		double turnRateX = min(turnSpeed, abs(angleTo));
		double turnRateY = min(turnSpeed, abs(pitchTo));
		double xSpeed = turnRateX * DSCMath.sign(angleTo);
		double ySpeed = turnRateY * DSCMath.sign(pitchTo);
		
		if(abs(angleTo) >= 2) toAngles.x = xSpeed;
		if(abs(pitchTo) >= 2) toAngles.y = ySpeed;
		toAngles.z = 0;
	}	
}
