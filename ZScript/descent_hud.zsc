const MainFont = "Fonts/DscBigFont.fon2";

class DescentMessage ui
{
	Font fnt;
	uint fontcol;
	double staytime;
	double maxtime;
	string msg;
	double alpha;
	vector2 scale;
	
	static DescentMessage CreateMessage(Font fnt, string msg, vector2 scale, int staytime = 60, uint translation = Font.CR_DarkGreen)
	{
		let hudmsg = new("DescentMessage");
		if(hudmsg)
		{
			hudmsg.alpha = 1.0;
			hudmsg.fnt = fnt;
			hudmsg.msg = msg;
			hudmsg.fontcol = translation;
			hudmsg.maxtime = staytime;
			hudmsg.staytime = staytime * 1.5;
			hudmsg.scale = scale;
		}
		return hudmsg;
	}
	
	void DoFade(double dt)
	{
		staytime -= dt;
		if(staytime <= 0)
		{
			msg = "";
			return;
		}
		alpha = staytime/maxtime;
	}
	
	void Draw(vector2 pos, double dt)
	{
		uint flags = DescentDraw.SS_SCREEN_CENTER | DescentDraw.SS_NOASPECTCORRECTION | DescentDraw.SS_TEXT_CENTER;
		DescentDraw.DrawString(fnt, msg, pos, flags, fontcol, alpha, scale, linespacing:15);
	}
}

class PowerupAnimator ui
{
	double timer;
	bool onoff;
	
	bool CheckActive(Actor src, class<Powerup> pwr, double dT, double blinkrate = 15)
	{
		let item = Powerup(src.FindInventory(pwr));
		if(!item) return false;
		
		if(item.EffectTics <= Inventory.BLINKTHRESHOLD)
		{
			timer += dT;
			
			if(timer > blinkrate) 
			{
				onoff = !onoff;
				timer = 0;
			}
		}
		else 
		{
			onoff = true;
		}
		
		return onoff;
	}
} 

class AnimatedImage ui
{
	string graphic;
	double totaltime;
	double timer;
	double animrate;
	uint frame;
	uint maxframe;
	
	static AnimatedImage Create(string img, double animspd, uint frames)
	{
		let animImg = new("AnimatedImage");
		if(animImg)
		{
			animImg.graphic = img;
			animImg.animrate = animspd;
			animImg.maxframe = frames;
		}
		return animImg;
	}
	
	void Reset()
	{	
		totaltime = timer = frame = 0;
	}
	
	string GetImage(double dT)
	{	
		timer += dT;
		totaltime += dT;
		if(timer > animrate)
		{
			timer = 0;
			frame++;
			if(frame > maxframe) frame = 1;
		}
		return String.Format("%s%d", graphic, frame);
	}
}

class DescentStatusBar : BaseStatusBar
{
	const ANIM_FPS = 60;
	const MSGMAX = 4;
	
	DescentPlayer dscplr;

	// Delta-time logic.
	double prevMS; 
	double deltatime;
	
	// Font(s)
	HUDFont mHUDFont;
	Font fnt;
	
	// Const
	vector2 baseScale;
	vector2 baseRes;
	
	// HUD Messages
	Array<DescentMessage> messages;
	
	
	// Animations
	double weapFade; // Fade for switching weapons.
	double specWeapFade;
	double curScore;
	bool missileCamActive;

	// Powerups
	PowerupAnimator cloakPowerup;
	PowerupAnimator invulPowerup;
	AnimatedImage invulGraphic;
	AnimatedImage camstaticGraphic;
	
	// Helper functions
	void DrawImg(String graphic, vector2 pos, vector2 scale = (1.0,1.0), double alpha = 1.0, double rotation = 0, bool fullpath = false)
	{
		scale = ApplyScale(scale);
		if(!fullpath) graphic ="Graphics/HUD/" .. graphic .. ".png";
		DescentDraw.DrawImage(graphic,pos, DescentDraw.SS_SCREEN_CENTER | DescentDraw.SS_NOASPECTCORRECTION, alpha, scale, 0);
	}
	
	void ClipImage(vector2 pos, vector2 imgOffs, vector2 size, bool visualize = false)
	{		
		vector2 mid = (1920/2., 1080/2.);
		size = ApplyScale(size);
		imgOffs = ApplyScale(imgOffs);
		pos.x -= imgOffs.x;
		pos.y -= imgOffs.y;
		
		DescentDraw.SetClipRect(pos.x + mid.x, pos.y + mid.y, size.x, size.y, visual:visualize); 
	}
	
	void DrawStr(String txt, vector2 pos, uint fontcol = Font.CR_UNTRANSLATED, uint flags = 0, double alpha = 1.0, vector2 scale = (1.0,1.0))
	{	
		scale *= 0.65; // Scale for DscBigFont.
		DescentDraw.DrawString(fnt, txt, pos, DescentDraw.SS_SCREEN_CENTER | DescentDraw.SS_NOASPECTCORRECTION | flags, fontcol, alpha, scale, linespacing:15);
	}
	
	double GetAspectScale()
	{
		return 1 / (Screen.GetAspectRatio() / (1600. / 1200.));
	}
	
	vector2 ApplyScale(vector2 scale)
	{
		scale.x *= baseScale.x;
		scale.y *= baseScale.y;
		
		return scale;
	}
	
	// Messages
	override bool ProcessNotify(EPrintLevel printlevel, String outline)
	{
		bool logprint = (printlevel & PRINT_LOG);
		bool chatmsg  = (printlevel & (PRINT_CHAT|PRINT_TEAMCHAT));
		bool validprint = (logprint && chatmsg) || (printlevel < PRINT_HIGH);
		if(!validprint) return false;
		
		PushMessage(outline);
		return true;
	}
		
	void PushMessage(String msg)
	{
		vector2 msgscale = (0.7, 0.8);
		uint count = messages.Size()-1;
		// Generate
		let msg = DescentMessage.CreateMessage(fnt, msg.MakeUpper(), msgscale);
		if(count >= MSGMAX-1) messages.Delete(count);

		messages.Insert(0, msg);
	}
	
	
	void DrawMessages()
	{
		vector2 msgpos = (0, -540);
		uint count = messages.Size()-1;
		for(int i = count; i >= 0; i--)
		{
			let msg = messages[i];
			if(msg.msg == "") 
			{
				messages.Delete(i);
				continue;
			}
			
			if(i == count) 
				msg.DoFade(deltatime);
			else
				msg.alpha = 1.0;
				
			msg.Draw(msgpos, deltatime);
			msgpos.y += 40;
		}
	}
	
	override void Init()
	{
		Super.Init();
		if(CPlayer) dscplr = DescentPlayer(CPlayer.mo);
		
		// Create the font used for the fullscreen HUD
		fnt = MainFont; //"DescFont";
		mHUDFont = HUDFont.Create(fnt);
		baseRes = (1920, 1080);
		baseScale = (6.0,5.5);
		cloakPowerup = new("PowerupAnimator");
		invulPowerup = new("PowerupAnimator");
		invulGraphic = AnimatedImage.Create("Invuln", 10, 10);
		camstaticGraphic = AnimatedImage.Create("camstatic", 4, 3);
		SetSize(0, baseRes.x, baseRes.y);
	}
	
	override void Draw (int state, double TicFrac)
	{
		if(automapactive) Super.Draw(state, TicFrac);
		
		// Always draw HUD
		BeginHUD();
		DrawMainBar (TicFrac);
	}
	
	void DrawMainBar (double TicFrac)
	{
		if(CPlayer && CPlayer.mo)
		{	
			if(!dscplr) 
			{
				dscplr = DescentPlayer(CPlayer.mo);
				return;	
			}
			
			bool dead = dscplr.health <= 0;
			
			// Draw features
			if(!automapactive && !dead) DrawPrimaryHUD();
			
			// Lives and Score
			vector2 livesPos = (-900, -500);
			string livesTxt = String.Format("\c[DarkGreen]x %d", dscplr.countinv("Token_ExtraLife"));
			DrawImg("lives", livesPos);
			DrawStr(livesTxt, livesPos+(32,-16));
			
			vector2 scorePos = (600, -520);
			string scoreTxt = String.Format("\c[Green]Score:");
			string pts = String.Format("\c[Green]%d", curScore);
			DrawStr(scoreTxt, scorePos, scale:(1.35,1.25));
			DrawStr(pts, (900,-520), flags:DescentDraw.SS_TEXT_RIGHT, scale:(1.35,1.25));
			
			// Interpolated values
			curScore = DSCMath.Lerp(curScore, dscplr.scorePts, 0.25 * deltaTime);
			if(abs(curScore - dscplr.scorePts) <= 1) curScore = dscplr.scorePts;
			
			
			if(dscplr.waitingRespawn)
			{
				String respawnText = "Press the use key to continue... ";
				if(!dscplr.countinv("Token_ExtraLife")) respawnText = "GameOver.";
				DrawStr(respawnText.MakeUpper(), (50,460), Font.CR_Green, DescentDraw.SS_TEXT_CENTER, scale:(2.0,2.0));
			}
			
			// Screen colors
			Screen.Dim(dscplr.screen_color, dscplr.screen_fade, 0,0, Screen.GetWidth(), Screen.GetHeight());
			
			// UI Messages
			DrawMessages();
			
			// Keep track of time, always.
			if(!prevMS)
			{
				prevMS = MSTime();
				return;
			}
			double ftime = MSTime()-prevMS;
			prevMS = MSTime();
			double dtime = 1000.0 / ANIM_FPS;
			deltatime = (ftime/dtime);
		}
	}
	
	void DrawWeapons(vector2 origin, vector2 scale)
	{
		// Draw weapon
		let weap = DSCWeapon(dscplr.player.ReadyWeapon);
		let pendWeap = DSCWeapon(dscplr.player.PendingWeapon);
		if(!weap) return;
		vector2 weapPos = origin + (-530,60);
		string weapName = weap.GetTag();
		DrawImg(weap.HUDGraphic, weapPos, scale, 1.0-weapFade);
		//DrawStr(weapName.MakeUpper(), weapPos+(70,-80), Font.CR_DarkGreen, 1.0-weapFade, scale:(1.5*scale.x,1.25*scale.y));
		DrawStr(weap.GetUIDescription(), weapPos+(70,-80), alpha:1.0-weapFade, scale:(1.25*scale.x,1.60*scale.y));
		
		if(pendWeap)
		{
			weapFade += 0.1 * deltaTime;
		}
		else if(weapFade > 0)
		{
			weapFade -= 0.1 * deltaTime;
		}
		weapFade = clamp(weapFade, 0, 1.0);
		
		// Draw Special Weapon
		if(missileCamActive) return; // Do not draw if missile camera is active.
		
		let specWeap = DSCSpecialWeapon(dscplr.ReadySpecial);
		let specPendWeap = DSCSpecialWeapon(dscplr.PendingSpecial);
		if(!specWeap) specWeap = specPendWeap;
		if(!specWeap) return;
		weapPos = origin + (530,60);
		weapName = specWeap.displayName;
		DrawImg(specWeap.HUDGraphic, weapPos, scale, 1.0-specWeapFade);
		DrawStr(specWeap.GetUIDescription(), weapPos+(-240,-80), alpha:1.0-specWeapFade, scale:(1.25*scale.x,1.60*scale.y));
		
		if(specPendWeap)
		{
			specWeapFade += 0.1 * deltaTime;
		}
		else if(specWeapFade > 0)
		{
			specWeapFade -= 0.1 * deltaTime;
		}
		specWeapFade = clamp(specWeapFade, 0, 1.0);
			
	}
	
	void DrawCrosshair(double scale = 1.0)
	{
		vector2 xScale = (scale,scale);
		DrawImg("Crosshair/cross1", (0,0), xScale);
		
		
		// Draw Weapon crosshair.
		let weap = DSCWeapon(dscplr.player.ReadyWeapon);
		if(!weap) return;
		
		string xhairFiring = weap.OffCrosshair;    
		string xhairReady  = weap.OnCrosshair;    
		
		let psp = dscplr.player.GetPSprite(PSP_WEAPON);
		if(psp)
		{	
			bool weapReady = Actor.InStateSequence(psp.CurState, weap.FindState("Ready"));
			string xhairWeap = weapReady ? xhairReady : xhairFiring;
			
			DrawImg(xhairWeap, (0,36), xScale);
		}
		
		// Draw Special Weapon crosshair.
		let specWeap = DSCSpecialWeapon(dscplr.ReadySpecial);
		if(!specWeap) return;
		
		xhairFiring = specWeap.OffCrosshair;    
		xhairReady  = specWeap.OnCrosshair;    
		string xhairWeap = specWeap.cooldown > 5 ? xhairFiring : xhairReady;
		
		DrawImg(xhairWeap, (0,18), xScale);
	}
	
	void DrawMissileCamera(vector2 camPos)
	{
		// Missile view
		String missileText = "Missile";
		let mcam = dscplr.missileCam;
		if(mcam) 
		{
			missileCamActive = true;
		}
		else if(missileCamActive)
		{
			DrawImg(camstaticGraphic.GetImage(deltaTime), camPos, (1.0,0.8));
			if(camstaticGraphic.totaltime > 60) 
			{
				missileCamActive = false;
				camstaticGraphic.Reset();
			}
		}
		if(mcam)
		{
			if(dscplr.GuidingMissile == mcam) missileText = "Guided Missile";
			// Draw target camera
			TexMan.SetCameraToTexture(mcam,"MissileCamera",90.0);
			DrawImg("MissileCamera", camPos, (1.0,0.8), fullpath:true);
			DrawStr(missileText, camPos - (0,-150), flags:DescentDraw.SS_TEXT_CENTER, scale:(1.25,1.5));
		}
	
	}
	
	void DrawPrimaryHUD()
	{
		if(dscplr.rearView)
		{
			DrawImg("rearview", (0,0));
			return;
		}
		
		vector2 cockpitPos = (0,360);
		vector2 cockpitScale = (1.0,0.80);
		DrawImg("cockpit_upper", (0,0));
		
		// Draw LCD then lower cockpit.
		vector2 lcdPos = (443,426);
		
		DrawImg("cockpit_lcd", lcdPos, cockpitScale);
		DrawMissileCamera(lcdPos);
		
		DrawImg("cockpit_lower", cockpitPos, cockpitScale);
		
		if(missileCamActive && dscplr.missileCam)
		{
			let mcam = DSCProjectile(dscplr.missileCam);
			if(mcam) DrawStr(mcam.GetCameraName(), lcdPos - (0,95), Font.CR_DarkGreen, flags:DescentDraw.SS_TEXT_CENTER, scale:(1.25,1.0));
		}
				
		int shieldImg = 9 - ceil((dscplr.shields / dscplr.default.shields) * 9.);
		shieldImg = clamp(shieldImg, 0, 9);
		vector2 shieldPos = cockpitPos+(15,55);
		DrawImg("shield" .. shieldImg, shieldPos, cockpitScale);
		
		// Check for invulnerability
		if(invulPowerup.CheckActive(dscplr, "PowerInvuln", deltaTime))
			DrawImg(invulGraphic.GetImage(deltaTime), shieldPos, cockpitScale); 
		
		// Check for cloaking device.
		if(!cloakPowerup.CheckActive(dscplr, "PowerCloak", deltaTime)) 
			DrawImg("ship", shieldPos, cockpitScale);
		
		DrawStr(String.Format("%d", floor(dscplr.shields)), shieldPos+(0,-115), Font.CR_LightBlue, flags:DescentDraw.SS_TEXT_CENTER, scale:(1.5*cockpitScale.x,1.7*cockpitScale.y));
		
		DrawWeapons(cockpitPos, cockpitScale);
		DrawCockpitKeys();
		
		// Draw Energy
		vector2 leftEnergyBarPos  = cockpitPos + (-735, -101);
		vector2 rightEnergyBarPos = cockpitPos + ( 370, -101);
		
		// Afterburner
		let afburner = AfterBurner(dscplr.FindInventory("AfterBurner"));
		if(afburner)
		{
			vector2 meterPos = leftEnergyBarPos + (72, 172);
			double drain = 25 * (1.0 - afburner.charge);
			ClipImage(meterPos, (6,12 - drain), (12,25));
			DrawImg("AfterBurnMeter", meterPos, cockpitScale); 
			DescentDraw.ClearClipRect();
		}
		
		double energyPerc = clamp(dscplr.energy / dscplr.default.energy, 0, 1.0);
		
		ClipImage(rightEnergyBarPos, (32,4), (64 * energyPerc, 8)); 
		DrawImg("energyGauge", rightEnergyBarPos, cockpitScale);
		DescentDraw.ClearClipRect();
		
		double xoffs = (1.0-energyPerc) * -64;
		ClipImage((leftEnergyBarPos.x, leftEnergyBarPos.y), (-32 + xoffs,4), (64 * energyPerc, 8)); 
		DrawImg("energyGauge", leftEnergyBarPos, (-cockpitScale.x, cockpitScale.y) );
		DescentDraw.ClearClipRect();
		
		DrawStr(String.Format("%d", floor(dscplr.energy)), rightEnergyBarPos+(-352,-15), Font.CR_Gold, flags:DescentDraw.SS_TEXT_CENTER, scale:(1.5*cockpitScale.x,1.7*cockpitScale.y));
				
		// Should be always drawn on top.
		DrawCrosshair(1.0);
	}	
	
	void DrawCockpitKeys()
	{	
		vector2 keyScale = (-1.0, 0.8);
		for(let item = dscplr.Inv; item; item = item.Inv)
		{
			let keyItem = Key(item);
			if(!keyItem) continue;
			
			string keySpecies = keyItem.Species;
			if(keySpecies ~== "none") keySpecies = keyItem.GetTag(); 
			
			vector2 keypos = (624,303);
			string keyGraphic = "";
			string keyType = "key";

			if(keySpecies.IndexOf("Blue") > -1) 
			{
				keyGraphic = "blue";
				keypos.y += 50;
			}
			if(keySpecies.IndexOf("Yellow") > -1) 
			{
				keyGraphic = "yellow";
				keypos += (5, 95);
			}
			if(keySpecies.IndexOf("Red") > -1) 
			{	
				keyGraphic = "red";
				keypos += (10, 138);
			}
			if(keySpecies.IndexOf("Skull")  > -1) keyType    = "skull";
			keyGraphic = keyGraphic .. keyType;

			DrawImg(keyGraphic, keypos, keyScale);
		}
	}
}