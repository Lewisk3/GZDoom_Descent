class Descent_HomMissile : DSCSpecialWeapon
{
	bool fireLeft;

	Default
	{
		DSCSpecialWeapon.Tag "HOMING\n\c[DarkGreen]MISSILE";
		DSCSpecialWeapon.WeaponName "Homing Missile";
		DSCSpecialWeapon.DisplayGraphic "homingMissile";
		DSCSpecialWeapon.SetupCrosshairs "Crosshair/missile2", "Crosshair/missile0";
		DSCSpecialWeapon.SlotNumber 2;
		DSCSpecialWeapon.AmmoBundle "Descent_HomMissileBundle";
		Inventory.MaxAmount 10 * DSCMAXAMMO; // 10;
	}
		
	override bool Fire()
	{
		if(cooldown || raiseY < 1.0) return false;
		if(amount <= 0) return false;
		
		if(ShootProjectile("DSCProj_HomMissile", offs:(10,fireLeft ? -15 : 15, 0)))
		{
			fireLeft = !fireLeft;
			OnCrosshair = fireLeft ? "Crosshair/missile1" : "Crosshair/missile2";
			cooldown = 10;
			Deplete();
		}
		
		return true;
	}
	
	States
	{
		Spawn:
			HMIS ABCDEFGHIJKLMNO 5;
		loop;
	}
}

class Descent_HomMissileBundle : DSCMissilePickup
{
	Default
	{
		DSCMissilePickup.Setup "Descent_HomMissile", 4;
	}
	
	States
	{
		Spawn:
			HMS4 ABCDEFGHIJKLMNO 5;
		loop;
	}
}

class DSCProj_HomMissile : DSCProj_ConMissile
{
	vector3 toAngles;
	Quat curRotation;

	bool view_allaround;
	double mindist, maxdist, trackTime, maxturn;
	Property TargetSearchTime : trackTime; // In seconds.
	Property TrackingRanges : mindist, maxdist; 
	Property TrackingStrength : maxturn;
	Property TrackFullVision : view_allaround;
	
	Default
	{
		Speed 14;
		+INTERPOLATEANGLES;
		DamageFunction DescentDMG(27);
		DSCProj_HomMissile.TargetSearchTime 5.0; 
		DSCProj_HomMissile.TrackingRanges 0, 1024;
		DSCProj_HomMissile.TrackingStrength 4;
		DSCProj_HomMissile.TrackFullVision true;
		DSCProjectile.FireSound "HomingMissile/Fire";
		Tag "Homing";
	}
	
	override void PostBeginPlay()
	{
		super.PostBeginPlay();
		
		curRotation = Quat.FromAngles(angle, pitch, roll);
	}
	
	void TrackTracer()
	{
		if(!tracer) return;
		if(tracer.health <= 0 || tracer.bCORPSE) 
		{
			tracer = null;
			return;
		}
		
		vector3 trackAngles = level.SphericalCoords(pos, (tracer.pos.xy, tracer.pos.z+tracer.height*0.5), (angle, pitch));
		double turnRateX = min(maxturn, abs(trackAngles.x)) * -DSCMath.Sign(trackAngles.x);
		double turnRateY = min(maxturn, abs(trackAngles.y)) * -DSCMath.Sign(trackAngles.y);
		toAngles = (turnRateX, turnRateY, 0);	
	}
	
	Actor FindTarget(bool allaround = true)
	{	
		// Don't search for nearby targets if we've already got one
		// as a drone.
		if(DescentEnemy(target))
		{
			tracer = target.target;
			return tracer;
		}
		
		let it = ThinkerIterator.Create();
		Actor act;
		double closest = tracer ? Distance3DSquared(tracer) : double.infinity;
		double sq_mindist = mindist*mindist;
		double sq_maxdist = maxdist*maxdist;
		while (act = Actor(it.Next()))
		{
			double dist = Distance3DSquared(act);
			if(dist > closest || dist < sq_mindist || dist > sq_maxdist) continue;
			
			if(act == self || act == target) continue;
			if(!act.bSHOOTABLE || (target && target.player && !act.bISMONSTER) || act.bKILLED) continue;   
			
			LookExParams look;
			look.FOV = allaround ? 360 : 90;
			if(!IsVisible(act, allaround, look)) continue; // Actor is behind wall.     
			if(target && !target.IsVisible(act, allaround, look)) continue;
			
			tracer = act;
			closest = dist;
		}
		return tracer;
	}
	
	override void Tick()
	{
		super.Tick();
		if( GetAge() > 5 && (GetAge() < (trackTime * 35.0) || trackTime <= 0) ) 
			FindTarget(view_allaround);
			
		Quat input = Quat.FromAngles(toAngles.x, toAngles.y, toAngles.z);
		curRotation *= input;
		toAngles *= 0;
		
		Quat r = Quat.FromAngles(angle, pitch, roll);
		r = Quat.SLerp(r, curRotation, 0.3);
		
		let euler = DSCMath.getQuatAngles(r);
		A_SetAngle(euler.x, SPF_INTERPOLATE);
		A_SetPitch(euler.y, SPF_INTERPOLATE);
		A_SetRoll (euler.z, SPF_INTERPOLATE);
		TrackTracer();
		
		// Update velocity
		vel = DSCMath.V3Offset(angle,pitch,roll, 1,0,0, vel.Length());
	}
}