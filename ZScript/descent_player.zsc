class DescentPlayer : SixDoFPlayer
{
	Line BlockingDoor;
	Actor CockpitCamera;
	int scorePts;
	bool waitingRespawn;
	Actor projDanger; // LOCKED indicator.
	double shields, energy;
	double maxShield, maxEnergy;
	bool rearView;
	
	// UI 
	Color screen_color;
	double screen_fade;
	const FADE_RATE = 0.96;
	
	// Special Weapons
	DSCSpecialWeapon PendingSpecial;
	DSCSpecialWeapon ReadySpecial;
	DSCSpecialWeapon LastBomb;
	
	// Missiles 
	Actor missileCam;
	DSCProjectile GuidingMissile;
	
	Property Shield : shields, maxShield;
	Property Energy : energy, maxEnergy;
	
	Default
	{
		Player.ViewHeight 16;
		Mass 3000;
		Health 1;
		Player.MaxHealth 1;
		Player.ViewBob 0;
		
		DescentPlayer.Shield 100, 200;
		DescentPlayer.Energy 99, 200;
		
		Player.DisplayName "DescentShip";
		Player.StartItem "Descent_Laser", 1;
		Player.StartItem "Descent_ConMissile", 3;
		Player.StartItem "Token_ExtraLife", 2;
	}	
	
	override bool OnGiveSecret(bool printmsg, bool playsound) 
	{ 
		scorePts += 500;
		return true; 
	}
		
	
	void DropItems()
	{
		for(let item = Inv; item; )
		{
			let dscWeap = DSCWeapon(item);
			let dscSpecWeap = DSCSpecialWeapon(item);
			if(!dscWeap && !dscSpecWeap) 
			{
				item = item.Inv;
				continue;
			}
			
			if(dscWeap) dscWeap.EjectWeapon(); 
			if(dscSpecWeap) dscSpecWeap.EjectSpecialWeapon();
			
			// If item was de-tached from inventory, repeat loop.
			if(!item.Owner) 
				item = Inv;
			else
				item = item.Inv;
		}
	}
	
	void Respawn()
	{
		TakeInventory("Token_ExtraLife", 1);
		GiveInventory("Descent_ConMissile", 4);
		ResetRotation();
		A_SetHealth(MaxHealth);
		shields = default.shields;
		energy = default.energy;
		waitingRespawn = false;
	}
	
	override int DamageMobJ(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle)
	{	
		if(bInvulnerable) return 0;
				
		double trueDamage = double(damage) * descentServer_indamagemod;
		if(source is "DescentPlayer") 
			trueDamage /= DSCDMG;
		else 
			trueDamage *= DMGTAKEN;
			
		if(mod == 'Hitscan')
			trueDamage *= DMGHITSCANMOD;
		
		if(!shields)
		{
			health -= ceil(trueDamage);
		}
		else
		{
			shields -= trueDamage;
			if(shields < 0) shields = 0;
		}
	
		if(!checkVoodoo())
		{
			A_StartSound("Player/TakingDamage"); // flags:CHANF_OVERLAP
			DSCEffects.ScreenFlash(self, "Red", 0.35);
			if(health <= 0) GiveInventory("DeathAnimator", 1);
		}
		else if(health <= 0)
		{
			Die(inflictor, source, flags, mod);
		}
		
		return floor(trueDamage);
	}
	
	void FilterWeapons()
	{
		for(let item = Inv; item; item = item.Inv)
		{
			if(!Weapon(item)) continue;
			if(!DSCWeapon(item)) DropInventory(item);
		}
	}
	
	override void Tick()
	{
		super.Tick();
		
		if(checkVoodoo() || health <= 0) 
		{
			bNOGRAVITY = false;
			return;
		}
		
		if(GuidingMissile) 
		{
			player.cheats |= CF_INTERPVIEW;
			lookMod = 0;
		}
		else 
		{
			lookMod = 1.0;
		}
				
		// Height is set here so that voodoo scripts do not break.
		if(height != 28) A_SetSize(16,20);
		
		screen_fade *= FADE_RATE;
		FilterWeapons();
		
		// Clamp stats
		shields = clamp(shields, 0, maxShield);
		energy = clamp(energy, 0, maxEnergy);
		
		controlInvert = rearView;
		ViewAngle = rearView ? 180 : 0;
		
		if(!ReadySpecial && FindNextSpecial()) FindNextSpecial().Select();
		uint btns = player.cmd.buttons;
		uint oldbtns = player.oldbuttons;
		
		// Handle SpecialWeapon shooting.
		if( (btns & BT_ALTATTACK) && ReadySpecial )
		{
			SoundAlert(self);
			ReadySpecial.Fire();
		}
		
		// Handle Flare shooting.
		if( (btns & BT_USER3) && !(oldbtns & BT_USER3) )
			DSCEffects.ShootProjectile(self, "DSCProj_Flare", true);
			
		// Handle SpecialWeapon switching.
		if( (btns & BT_USER1) && !PendingSpecial)
			PendingSpecial = FindPrevSpecial();
		
		if( (btns & BT_USER2) && !PendingSpecial)
			PendingSpecial = FindNextSpecial();
			
		// Find active Bomb
		if(!LastBomb) 
			LastBomb = DSCSpecialWeapon(FindInventory("Descent_ProxMine"));
		else if( (ReadySpecial is "Descent_ProxMine") && LastBomb != ReadySpecial )
			LastBomb = ReadySpecial;
			
		// Bomb firing hotkey
		if( (btns & BT_USER4) && LastBomb)
		{
			SoundAlert(self);
			LastBomb.Fire();
		}
		
		// Open Door if colliding with it.
		FLineTraceData lt;
		LineTrace(angle, UseRange+radius, pitch, data:lt);
		if(lt.HitLine && lt.HitLine != BlockingDoor)  
		{
			BlockingDoor = lt.HitLine;
			DSCEffects.CanOpenDoor(self, lt.HitLine);
		}
		else if(!lt.HitLine)
			BlockingDoor = NULL;
		
		// Check for nearby projectiles
		let pIt = ThinkerIterator.Create();
		Actor act;
		double threatDist = 256**2;
		while(act = Actor(pIt.Next()))
		{
			if(!act.bMISSILE) continue;
			if(Distance3DSquared(act) > threatDist) continue;
			if( !(act is "Rocket" || act.tracer == self) ) continue;
			projDanger = act;
		}
	}
	
	virtual DSCSpecialWeapon GetSpecialWeapon(int slotnum)
	{
		for(let item = Inv; item; item = item.Inv)
		{
			let spec = DSCSpecialWeapon(item);
			if(!spec) continue;
			if(spec.amount <= 0 || spec.slot != slotnum) continue;
			
			return spec;
			break;
		}
		return null;
	}
	
	// Messy but idk how to fix currently.
	virtual DSCSpecialWeapon FindNextSpecial()
	{
		DSCSpecialWeapon result;
		if(!ReadySpecial)
		{
			for(let item = Inv; item; item = item.Inv)
			{
				let spec = DSCSpecialWeapon(item);
				if(!spec) continue;
				if(spec.amount <= 0) continue;
				result = spec;
				break;
			}
		}
		else
		{
			int desiredSlot = ReadySpecial.slot + 1;
			int closestSlot = int.max;
			for(let item = Inv; item; item = item.Inv)
			{
				let spec = DSCSpecialWeapon(item);
				if(!spec || spec == ReadySpecial) continue;
				if(spec.amount <= 0) continue;
				int slotDiff = abs(desiredSlot-spec.slot);
				if(slotDiff < closestSlot && spec.slot >= desiredSlot) 
				{
					closestSlot = slotDiff;
					result = spec;
				}
			}
			if(!result)
			{
				desiredSlot = 0;
				for(let item = Inv; item; item = item.Inv)
				{
					let spec = DSCSpecialWeapon(item);
					if(!spec || spec == ReadySpecial) continue;
					if(spec.amount <= 0) continue;
					int slotDiff = abs(desiredSlot-spec.slot);
					if(slotDiff < closestSlot) 
					{
						closestSlot = slotDiff;
						result = spec;
					}
				}
			}
		}
		return result;
	}

	virtual DSCSpecialWeapon FindPrevSpecial()
	{
		DSCSpecialWeapon result;
		if(!ReadySpecial)
		{
			for(let item = Inv; item; item = item.Inv)
			{
				let spec = DSCSpecialWeapon(item);
				if(!spec) continue;
				if(spec.amount <= 0) continue;
				result = spec;
				break;
			}
		}
		else
		{
			int desiredSlot = ReadySpecial.slot - 1;
			int closestSlot = int.max;
			for(let item = Inv; item; item = item.Inv)
			{
				let spec = DSCSpecialWeapon(item);
				if(!spec || spec == ReadySpecial) continue;
				if(spec.amount <= 0) continue;
				int slotDiff = abs(desiredSlot-spec.slot);
				if(slotDiff < closestSlot && spec.slot <= desiredSlot) 
				{
					closestSlot = slotDiff;
					result = spec;
				}
			}
			if(!result)
			{
				desiredSlot = 10;
				for(let item = Inv; item; item = item.Inv)
				{
					let spec = DSCSpecialWeapon(item);
					if(!spec || spec == ReadySpecial) continue;
					if(spec.amount <= 0) continue;
					int slotDiff = abs(desiredSlot-spec.slot);
					if(slotDiff < closestSlot) 
					{
						closestSlot = slotDiff;
						result = spec;
					}
				}
			}
		}
		return result;
	}
	
	States
	{
		Spawn:
			SHIP A -1;
			Loop;
		See:
			SHIP A 4;
			Loop;
		Missile:
			SHIP A 12;
			Goto Spawn;
		Melee:
			SHIP A 6;
			Goto Missile;
		Pain:
			SHIP A 4 A_Pain();
		Goto Spawn;
		Death:
			SHIP A -1 A_NoBlocking();
			Stop;
		XDeath:
			SHIP A -1 A_NoBlocking();
			Stop;
	}
}	