class DescentEvents : EventHandler
{	
	override void CheckReplacement(ReplaceEvent e)
	{
		if(e.Replacee is "Shotgun")
		{
			string replacements[] = {
				"Descent_Laser",
				"Descent_SpreadFire"
			};
			e.Replacement = replacements[random[DSCReplacement](0,1)];
		}
		if(e.Replacee is "SuperShotgun")
		{
			string replacements[] = {
				"Descent_SuperLaser",
				"Descent_HelixCannon"
			};
			e.Replacement = replacements[random[DSCReplacement](0,1)];
		}
		
		if(e.Replacee is "Chainsaw")
			e.Replacement = "Descent_QuadLasers";
			
		if(e.Replacee is "Chaingun")
		{
			string replacements[] = {
				"Descent_VulcanCannon",
				"Descent_GaussCannon",
				"Descent_ConMissile"
			};
			e.Replacement = replacements[random[DSCReplacement](0,2)];
		}
			
		if(e.Replacee is "Plasmarifle")
		{
			string replacements[] = {
				"Descent_FusionCannon",
				"Descent_PlasmaCannon",
				"Descent_PhoenixCannon"
			};
			e.Replacement = replacements[random[DSCReplacement](0,2)];
		}
		
		if(e.Replacee is "RocketLauncher")
		{
			string replacements[] = {
				"Descent_ConMissile",
				"Descent_GuidedMissile",
				"Descent_ConMissile",
				"Descent_FlashMissile",
				"Descent_HomMissile",
				"Descent_MercMissile"
			};
			e.Replacement = replacements[random[DSCReplacement](0,5)];
		}
		
		if(e.Replacee is "BFG9000")
		{
			string replacements[] = {
				"Descent_OmegaCannon",
				"Descent_EarthshakerMissile"
			};
			e.Replacement = replacements[random[DSCReplacement](0,1)];
		}
		
		if( (e.Replacee is "CellPack") && random[DSCReplacement](0,100) == 100)
		{
			e.Replacement = "Descent_EarthshakerMissile";
			return;
		}
		if(e.Replacee is "ClipBox" || e.Replacee is "ShellBox" || e.Replacee is "CellPack")
		{
			string replacements[] = {
				"Descent_ConMissileBundle",
				"Descent_ConMissileBundle",
				"Descent_ConMissileBundle",
				"Descent_MercMissileBundle",
				"Descent_MercMissileBundle",
				"Descent_GuidedMissile",
				"Descent_HomMissileBundle",
				"Descent_HomMissileBundle",
				"Descent_HomMissileBundle",
				"Descent_SmartMissile",
				"Descent_SmartMissile",
				"Descent_FlashMissile",
				"Descent_MegaMissile"
			};
			e.Replacement = replacements[random[DSCReplacement](0,12)];
			return;
		}
		if(e.Replacee is "Clip" || e.Replacee is "Shell" || e.Replacee is "Cell")
		{
			e.Replacement = "Actor";
			if(random[DSCReplacement](0,4)==4)
				e.Replacement = "EnergyBoost";
		}
		
		if(e.Replacee is "RocketBox" )
		{
			string replacements[] = {
				"Descent_MercMissileBundle",
				"Descent_MercMissileBundle",
				"Descent_GuidedMissileBundle",
				"Descent_GuidedMissileBundle",
				"Descent_HomMissileBundle",
				"Descent_HomMissileBundle",
				"Descent_SmartMissile",
				"Descent_SmartMissile",
				"Descent_SmartMissile",
				"Descent_FlashMissileBundle",
				"Descent_MegaMissile"
			};
			e.Replacement = replacements[random[DSCReplacement](0,10)];
			return;
		}
		if(e.Replacee is "RocketAmmo")
		{
			e.Replacement = "Actor";
			if(random[DSCReplacement](0,4)==4)
				e.Replacement = "Descent_ProxMine";
			if(random[DSCReplacement](0,10)==10)
				e.Replacement = "Descent_SmartMine";
		}
		
		if(e.Replacee is "Medikit" || e.Replacee is "Stimpack")
		{
			string replacements[] = {
				"EnergyBoost",
				"ShieldsBoost"
			};
			e.Replacement = replacements[random[DSCReplacement](0,1)];
			return;
		}
		if(e.Replacee is "HealthBonus" || e.Replacee is "ArmorBonus")
		{
			e.Replacement = "Actor";
			if(random[DSCReplacement](0,5)==5)
				e.Replacement = "ShieldsBoost";
		}
		
		if(e.Replacee is "GreenArmor" || e.Replacee is "BlueArmor")
		{
			e.Replacement = "ShieldsBoost";
		}
		
		if(e.Replacee is "Berserk")
		{
			e.Replacement = "AfterBurnerPickup";
		}
		
		if(e.Replacee is "BlurSphere")
		{
			e.Replacement = "CloakDevice";
		}
		
		if(e.Replacee is "InvulnerabilitySphere")
		{
			e.Replacement = "Invulnerability";
		}
		
		if(e.Replacee is "AllMap")
		{
			e.Replacement = "DescentFullmap";
		}
		
		if(e.Replacee is "Infrared")
		{
			e.Replacement = "ShipHeadlights";
		}
		
		if(e.Replacee is "Backpack")
		{
			e.Replacement = "AmmoRack";
		}
		
		if(e.Replacee is "Radsuit")
		{
			e.Replacement = "EnergyConverter";
		}
		
		if(e.Replacee is "Megasphere" || e.Replacee is "Soulsphere")
		{
			e.Replacement = "ExtraLife";
		}
	}

	override void WorldThingDied(WorldEvent e)
	{
		Actor killer = e.Inflictor;
		if(!killer) killer = e.Thing.target;
		if(killer && killer.bMISSILE) killer = killer.target;
		
		let plrKiller = DescentPlayer(killer);
		if(!plrKiller) return;
		
		plrKiller.scorePts += e.Thing.SpawnHealth();
		vector3 explodePos = level.vec3offset(e.Thing.pos, (0,0,e.Thing.Height*0.5));
		Actor.Spawn("EnemyExplosion", explodePos);
		
		if(random[DeathDrops](0,20) == 20)
			Actor.Spawn("EnergyBoost", e.Thing.pos);
		else if(random[DeathDrops](0,50) == 50)
			Actor.Spawn("ShieldsBoost", e.Thing.pos);
	}
	
	override void NetworkProcess(ConsoleEvent e)
    {
		let dscplr = DescentPlayer(players[e.Player].mo);
			
		// Controls
		if(dscplr)
		{
			if(e.name ~== "rearview") dscplr.rearview = !dscplr.rearview;
		
			// Powerups 
			if(e.Name ~== "toggleheadlight") 
			{
				let headlights = PyroGX_Headlight(dscplr.FindInventory("PyroGX_Headlight"));
				if(headlights) headlights.Toggle();
			}
			if(e.Name ~== "+convertenergy") 
			{
				let converter = EnergyConvertDevice(dscplr.FindInventory("EnergyConvertDevice"));
				if(converter) converter.BeginConvert();
			}
			if(e.Name ~== "-convertenergy") 
			{
				let converter = EnergyConvertDevice(dscplr.FindInventory("EnergyConvertDevice"));
				if(converter) converter.StopConvert();
			}
			if(e.Name ~== "+boost") 
			{
				let jets = AfterBurner(dscplr.FindInventory("AfterBurner"));
				if(jets) jets.Enable();
			}
			if(e.Name ~== "-boost") 
			{
				let jets = AfterBurner(dscplr.FindInventory("AfterBurner"));
				if(jets) jets.Disable();
			}
			
		}	
	}
}