// Credits: https://gist.github.com/itsmrpeck/be41d72e9d4c72d2236de687f6f53974
class DSCMath Abstract
{	
	const PI = 3.14159265358;
	const RAD = 180.0/PI;
	const TWOPI = 2*PI;

	// Lerps from angle a to b (both between 0.f and 360.f), taking the shortest path
	static double LerpAngle(double a, double b, double lerpFactor) 
	{
		double result;
		double diff = b - a;
		if (diff < -180.f)
		{
			// lerp upwards past 360
			b += 360.f;
			result = Lerp(a, b, lerpFactor);
			if (result >= 360.f)
			{
				result -= 360.f;
			}
		}
		else if (diff > 180.f)
		{
			// lerp downwards past 0
			b -= 360.f;
			result = Lerp(a, b, lerpFactor);
			if (result < 0.f)
			{
				result += 360.f;
			}
		}
		else
		{
			// straight lerp
			result = Lerp(a, b, lerpFactor);
		}
		return result;
	}
	
	static Vector3 GetLocalPos(Actor a, Vector3 offset)
	{
		vector3 forwards  = (cos(a.angle),      sin(a.angle),      0);
		vector3 sideways  = (cos(a.angle - 90), sin(a.angle - 90), 0);
		vector3 upwards = (0,0,1);
		vector3 offsetPos = a.pos + offset.x * forwards + offset.y * sideways + offset.z * upwards;
		return offsetPos;
	}
	
	play static void AlignToPlane(Actor a, double pitchAdjust = 0, double rollAdjust = 0, bool ceiling = false, double adjustSpeed = 2, bool ignorepitch = false, bool ignoreroll = false)
	{
		//Original code by ZZYZX & Nash Muhandes
		if (!a) return;
		double ceilingAdjust = 0;
		Vector3 fnormal;
		if (!ceiling)
		{
			fnormal = a.CurSector.FloorPlane.Normal;
		}
		else
		{
			fnormal = a.CurSector.CeilingPlane.Normal;
			ceilingAdjust = 180.0;
		}
		Vector2 fnormalp1 = (fnormal.x != 0 || fnormal.y != 0) ? (fnormal.x, fnormal.y).Unit() : (0, 0);
		Vector2 fnormalp2 = ((fnormal.x, fnormal.y).Length(), fnormal.z);
		double dang = a.Angle;
		double fang = atan2(fnormalp1.y, fnormalp1.x);
		double fpitch = atan2(fnormalp2.x, fnormalp2.y);
		double ddiff1 = sin(fang - (dang - pitchAdjust));
		double ddiff2 = cos(fang - (dang - rollAdjust));
		
		double pitchTarget = (fpitch * ddiff2 - pitchAdjust) + ceilingAdjust;
		double rollTarget = (-fpitch * ddiff1 - rollAdjust) + ceilingAdjust;
		double angleTarget = dang + ceilingAdjust;
		
		if(adjustSpeed == 0)
		{
			adjustSpeed = 180;
		}
		
		if(!ignorepitch)
		{
			if(a.Pitch < pitchTarget)
			{
				a.A_SetPitch(Clamp(a.pitch + adjustSpeed, a.pitch, pitchTarget));
			}
			else if(a.Pitch > pitchTarget)
			{
				a.A_SetPitch(Clamp(a.pitch - adjustSpeed, pitchTarget, a.pitch));
			}
		}
		
		if(!ignoreroll)
		{
			if(a.Roll < rollTarget)
			{
				a.A_SetRoll(Clamp(a.roll + adjustSpeed, a.roll, rollTarget));
			}
			else if(a.Roll > rollTarget)
			{
				a.A_SetRoll(Clamp(a.roll - adjustSpeed, rollTarget, a.roll));
			}
		}

		if(a.Angle < angleTarget)
		{
			a.A_SetAngle(Clamp(a.angle + adjustSpeed, a.angle, angleTarget));
		}
		else if(a.Angle > angleTarget)
		{
			a.A_SetAngle(Clamp(a.angle - adjustSpeed, angleTarget, a.angle));
		}
	}

	static double sign(double num)
	{
		return num < 0 ? -1 : 1;
	}

	// Generate forward facing vector from angle/pitch.
	static vector3 VecFromAngles(double angle, double pitch, double mag = 1.)
	{
		double cosp = cos(pitch);
		return (cos(angle)*cosp, sin(angle)*cosp, -sin(pitch)) * mag;
	}

	// Straight interpolate
	static double Strp(double a, double b, double value, double dampen=0.7)
	{	
		double dampenv = value * (1-(dampen**(abs(a-b)/value)));
		if(a < b) a += dampenv;
		if(a > b) a -= dampenv;
		if( abs(a-b) < dampenv) a = b;
		return a;
	}

	// Linear interpolate
	static double Lerp(double a, double b, double lerpFactor)
	{
		double result = ((1.f - lerpFactor) * a) + (lerpFactor * b);
		return result;
	}
	
	// Linear interpolate 3D vectors
	static vector3 Lerp3D(vector3 a, vector3 b, double lerpfactor)
	{
		vector3 result = a;
		result.x = Lerp(result.x,b.x,lerpfactor);
		result.y = Lerp(result.y,b.y,lerpfactor);
		result.z = Lerp(result.z,b.z,lerpfactor);
		return result;
	}
	
	// Determine if number v is in range of -r, r relative to t
	clearscope static bool inRange(double v, double t, double r)
	{
		return (v >= t-r && v <= t+r);
	}
	
	// Lerps from angle a to b (both between 0.f and 360.f), taking the shortest path
	static double LerpDegrees(double a, double b, double lerpFactor) 
	{
		double result;
		double diff = b - a;
		if (diff < -180.f)
		{
			// lerp upwards past 360
			b += 360.f;
			result = Lerp(a, b, lerpFactor);
			if (result >= 360.f)
			{
				result -= 360.f;
			}
		}
		else if (diff > 180.f)
		{
			// lerp downwards past 0
			b -= 360.f;
			result = Lerp(a, b, lerpFactor);
			if (result < 0.f)
			{
				result += 360.f;
			}
		}
		else
		{
			// straight lerp
			result = Lerp(a, b, lerpFactor);
		}

		return result;
	}
	
	// Pitch between 2 vectors.
	static double getPitchBetween(Vector3 one, Vector3 two)
	{	
		vector3 delta = ( one.x - two.x, one.y - two.y, one.z - two.z );
		double pitchto = VectorAngle( sqrt(delta.y * delta.y + delta.x * delta.x), delta.z );
		return pitchto;
	}
	
	// Distance 3D on vectors, not actors.
	static double Distance3D(vector3 one, vector3 two)
	{
		return (one-two).Length();
	}
	
	// Distance 2D on vectors, not actors.
	static float Distance2D(Vector2 one, Vector2 two)
	{
		return (one-two).Length();
	}
	
	// Rotate vectors.
	static Vector2 VRotate(Vector2 pos, double angle, bool invert=false)
	{
		if(invert)
		{
			double oldx = pos.x;
			pos.x = pos.y;
			pos.y = oldx;
		}
		return ( pos.y * cos(angle) - pos.x * sin(angle), 
		         pos.y * sin(angle) + pos.x * cos(angle) );
	}	
	
	// Clamp vectors.
	static vector2, double ClampVector(vector2 dest, vector2 origin, double dist)
	{
		double fulldist = sqrt( (dest.x - origin.x)**2 + (dest.y - origin.y)**2 );
		if(fulldist > dist) 
		{
			double vecangle = atan2(origin.y-dest.y, origin.x-dest.x);
			return ( (origin.x-cos(vecangle)*dist), (origin.y-sin(vecangle)*dist) ), fulldist;
		}
		return dest, fulldist;
	}
	
	// Get angle, pitch, roll from Quaternion q.
	static vector3 GetQuatAngles(Quat q)
	{
        // Roll
        double sinRCosP = 2 * (q.w * q.x + q.y * q.z);
        double cosRCosP = 1 - 2 * (q.x * q.x + q.y * q.y);
        double roll = Atan2(sinRCosP, cosRCosP);

        // Pitch
        double sinP = 2 * (q.w * q.y - q.z * q.x);
        double pitch;
        if (Abs(sinP) >= 1) pitch = 90 * (sinP < 0 ? -1 : 1);
        else pitch = Asin(sinP);

        // Yaw
        double sinYCosP = 2 * (q.w * q.z + q.x * q.y);
        double cosYCosP = 1 - 2 * (q.y * q.y + q.z * q.z);
        double yaw = Atan2(sinYCosP, cosYCosP);

        return (yaw, pitch, roll);
	}
	static Vector3, Vector3, Vector3 GetActorAxes(Actor act, vector3 viewScale = (1,1,1))
    {
        Quat r = Quat.FromAngles(act.angle * viewScale.x, act.pitch * viewScale.y, act.roll * viewScale.z);

        Vector3 forward = (1, 0, 0);
        forward = r * forward;

        Vector3 right = (0, -1, 0);
        right = r * right;

        Vector3 up = (0, 0, 1);
        up = r * up;

        return forward, right, up;
    }
	
	// Offset vector position.
	static Vector2 VOffset(double angle, double xoffs, double yoffs, double dist)
	{
		return ( xoffs * cos(angle) - yoffs * sin(angle),
				 yoffs * cos(angle) + xoffs * sin(angle) )*dist;
	}
	
	// 3D Vector offset. Utilizes Gutamatrix matrixes
	static vector3 V3Offset(double fromangle, double frompitch, double fromroll, double forward, double leftright, double updown, double distance)
    {
		let dir = Quat.FromAngles(fromangle,frompitch,fromroll);
		return dir * ((forward, -leftright, updown) * distance);
    }
	
	static vector3 RelativeV3Offset(Actor source, double angleoffs, double pitchoffs, double rolloffs, double forward, double leftright, double updown, double distance)
    {
		double a = source.angle + angleoffs;
		double p = source.pitch + pitchoffs;
		double r = source.roll  + rolloffs;
		vector3 vec = V3Offset(a, p, r, forward, leftright, updown, distance);
		
		vector3 frompos = (source.pos.xy, source.pos.z + source.height * 0.5);
		if(source.player) frompos.z = source.player.viewz;
		
		return level.vec3offset(frompos, vec);
    }

	// Intertial calculations for thrust on monsters.
	static double GetInertia(double emass)
	{
		// Deviation from small weight, 0 means no deviation.
		double m = 200; // Base mass
		double d = 0.15; // Mass dropoff
		double x = (1. - (emass/m));
		double y = -d*(x**2) + 1;
		return clamp(y*0.75,0.1,1.0);
	}
	
	// Credits: https://www.arduino.cc/reference/en/language/functions/math/map/
	static double fmap(double x, double in_min, double in_max, double out_min, double out_max) 
	{
		return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	}
	
	// Credits: https://stackoverflow.com/a/28037434
	static double AngleDiff( double angle1, double angle2 )
	{
		double diff = ( angle2 - angle1 + 180 ) % 360 - 180;
		return diff < -180 ? diff + 360 : diff;
	}

	play static bool CheckHeadshot(Actor source, Actor victim, double headsize = 8)
	{
        // Preform ray cast to determine where the shooter is aiming.
        FLineTraceData lt;
        source.LineTrace(source.angle,128,source.pitch,0,0,0,0,lt);
        float dmgz = lt.HitLocation.z;
        float headz    = (victim.pos.z + victim.height);
		return dmgz <= headz && dmgz >= headz-headsize;
	}
		
	/* Summary:
    **  Simulates a damped spring.
    **
    ** Arguments:
    **  p: Current position
    **  r: Rest position
    **  v: Current velocity
    **  k: Spring coefficient
    **  d: Damping coefficient
    **
    ** Returns:
    **  The new velocity.
    */
    static double DampedSpring (double p, double r, double v, double k, double d) 
	{
        return -(d * v) - (k * (p - r));
    }
}